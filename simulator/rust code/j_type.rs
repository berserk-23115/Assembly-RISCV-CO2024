use std::collections::HashMap;
pub fn j_type(hash_map : &HashMap<&str,&str>,
    input: String){
        let mut programcount : i32 = hash_map['PC'].parse().unwrap();
        let mut immediate : String = String :: new();
        let mut register : &str = input[20..25];
        immediate.push_str(&input[0..1]);
        immeditate.push_str(&input[1..9]);
        immediate.push_str(&input[9..10]); 
        immediate.push_str(&input[10..20]);
        let mut addition : String = '0'; 
        immediate.push_str(addition);
        let mut immediate_num : i32 = immediate.parse().unwrap();
        
        hash_map[register] = format32(programcount+4);
        hash_map['PC'] = format32(programcount+immediate_num);
    }
fn main(){
    let mut register_output : HashMap<&str,&str> = [
        //Program Counter
        ("PC","00000000000000000000000000000000"),

        //Registers and Their Stored Value
        ("00000","00000000000000000000000000000000"),
        ("00001","00000000000000000000000000000000"),
        ("00010","00000000000000000000000000000000"),
        ("00011","00000000000000000000000000000000"),
        ("00100","00000000000000000000000000000000"),
        ("00101","00000000000000000000000000000000"),
        ("00110","00000000000000000000000000000000"),
        ("00111","00000000000000000000000000000000"),
        ("01000","00000000000000000000000000000000"),
        ("01001","00000000000000000000000000000000"),
        ("01010","00000000000000000000000000000000"),
        ("01011","00000000000000000000000000000000"),
        ("01100","00000000000000000000000000000000"),
        ("01101","00000000000000000000000000000000"),
        ("01110","00000000000000000000000000000000"),
        ("01111","00000000000000000000000000000000"),
        ("10000","00000000000000000000000000000000"),
        ("10001","00000000000000000000000000000000"),
        ("10010","00000000000000000000000000000000"),
        ("10011","00000000000000000000000000000000"),
        ("10100","00000000000000000000000000000000"),
        ("10101","00000000000000000000000000000000"),
        ("10110","00000000000000000000000000000000"),
        ("10111","00000000000000000000000000000000"),
        ("11000","00000000000000000000000000000000"),
        ("11001","00000000000000000000000000000000"),
        ("11010","00000000000000000000000000000000"),
        ("11011","00000000000000000000000000000000"),
        ("11100","00000000000000000000000000000000"),
        ("11101","00000000000000000000000000000000"),
        ("11110","00000000000000000000000000000000"),
        ("11111","00000000000000000000000000000000"),

    ].clone().iter().collect();
    
    j_type(register_output,"00000000000000010000010000110111")
}
